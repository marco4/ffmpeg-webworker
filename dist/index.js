!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).ffmpegWebworker={})}(this,function(e){"use strict";var t="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var e,t=o(n);return e=r?(e=o(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),t=this,!(e=e)||"object"!=typeof e&&"function"!=typeof e?a(t):e}}function c(){importScripts("https://cdn.rawgit.com/bgrins/videoconverter.js/master/build/ffmpeg-all-codecs.js");var n=Date.now;function r(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;"command"===t.type&&(e={print:r,printErr:r,files:t.files||[],arguments:t.arguments||[],TOTAL_MEMORY:t.totalMemory||33554432},postMessage({type:"start",data:e.arguments.join(" ")}),postMessage({type:"stdout",data:"Received command: "+e.arguments.join(" ")+(e.TOTAL_MEMORY?".  Processing with "+e.TOTAL_MEMORY+" bits.":"")}),t=n(),e=ffmpeg_run(e),t=n()-t,postMessage({type:"stdout",data:"Finished processing (took "+t+"ms)"}),postMessage({type:"done",data:e,time:t}))},postMessage({type:"ready"})}var n,r,l,p=(function(e){(e=e).default=function t(e){if(function(e){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this),"function"!=typeof e)throw new Error("File content must export a function");e=e.toString(),e=new Blob(["("+e+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(e))},Object.defineProperty(e,"__esModule",{value:!0})}((n={exports:{}},n.exports)),n.exports),h=(r=p)&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;function d(){}function y(){y.init.call(this)}function v(e){return void 0===e._maxListeners?y.defaultMaxListeners:e._maxListeners}function m(e,t,n,r){var o,i;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');return(o=e._events)?(o.newListener&&(e.emit("newListener",t,n.listener||n),o=e._events),i=o[t]):(o=e._events=new d,e._eventsCount=0),i?("function"==typeof i?i=o[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),i.warned||(r=v(e))&&0<r&&i.length>r&&(i.warned=!0,(r=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit")).name="MaxListenersExceededWarning",r.emitter=e,r.type=t,r.count=i.length,r=r,"function"==typeof console.warn?console.warn(r):console.log(r))):(i=o[t]=n,++e._eventsCount),e}function w(e,t,n){var r=!1;function o(){e.removeListener(t,o),r||(r=!0,n.apply(e,arguments))}return o.listener=n,o}function g(e){var t=this._events;if(t){e=t[e];if("function"==typeof e)return 1;if(e)return e.length}return 0}function b(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}d.prototype=Object.create(null),(y.EventEmitter=y).usingDomains=!1,y.prototype.domain=void 0,y.prototype._events=void 0,y.prototype._maxListeners=void 0,y.defaultMaxListeners=10,y.init=function(){this.domain=null,y.usingDomains&&l.active&&l.Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new d,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},y.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},y.prototype.getMaxListeners=function(){return v(this)},y.prototype.emit=function(e){var t,n,r,o="error"===e,i=this._events;if(i)o=o&&null==i.error;else if(!o)return!1;if(s=this.domain,o){if(o=arguments[1],s)return(o=o||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,o.domain=s,o.domainThrown=!1,s.emit("error",o),!1;if(o instanceof Error)throw o;var s=new Error('Uncaught, unspecified "error" event. ('+o+")");throw s.context=o,s}if(!(t=i[e]))return!1;var u,a="function"==typeof t;switch(u=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,o=b(e,r),i=0;i<r;++i)o[i].call(n)}(t,a,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var o=e.length,i=b(e,o),s=0;s<o;++s)i[s].call(n,r)}(t,a,this,arguments[1]);break;case 3:!function(e,t,n,r,o){if(t)e.call(n,r,o);else for(var i=e.length,s=b(e,i),u=0;u<i;++u)s[u].call(n,r,o)}(t,a,this,arguments[1],arguments[2]);break;case 4:!function(e,t,n,r,o,i){if(t)e.call(n,r,o,i);else for(var s=e.length,u=b(e,s),a=0;a<s;++a)u[a].call(n,r,o,i)}(t,a,this,arguments[1],arguments[2],arguments[3]);break;default:for(n=new Array(u-1),r=1;r<u;r++)n[r-1]=arguments[r];!function(e,t,n,r){if(t)e.apply(n,r);else for(var o=e.length,i=b(e,o),s=0;s<o;++s)i[s].apply(n,r)}(t,a,this,n)}return!0},y.prototype.on=y.prototype.addListener=function(e,t){return m(this,e,t,!1)},y.prototype.prependListener=function(e,t){return m(this,e,t,!0)},y.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,w(this,e,t)),this},y.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,w(this,e,t)),this},y.prototype.removeListener=function(e,t){var n,r,o,i,s;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new d:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length;0<i--;)if(n[i]===t||n[i].listener&&n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new d,this;delete r[e]}else!function(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}(n,o);r.removeListener&&this.emit("removeListener",e,s||t)}return this},y.prototype.removeAllListeners=function(e){var t,n=this._events;if(!n)return this;if(!n.removeListener)return 0===arguments.length?(this._events=new d,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new d:delete n[e]),this;if(0===arguments.length){for(var r,o=Object.keys(n),i=0;i<o.length;++i)"removeListener"!==(r=o[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new d,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},y.prototype.listeners=function(e){var t=this._events,n=t&&(n=t[e])?"function"==typeof n?[n.listener||n]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(n):[];return n},y.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):g.call(e,t)},y.prototype.listenerCount=g,y.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};var _=function(){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(o,y);var e,t,n,r=f(o);function o(){var s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),u(a(s=r.call(this)),"_worker",{}),u(a(s),"_inputFile",{}),u(a(s),"workerIsReady",!1),u(a(s),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),u(a(s),"runCommand",function(r,o){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:33554432;if("string"!=typeof o||!o.length)throw new Error("command should be string and not empty");s.inputFile&&s.inputFile.type?s.convertInputFileToArrayBuffer().then(function(e){for(;!s.workerIsReady;);var t="video-".concat(Date.now(),".webm"),n="".concat(r," -i ").concat(t," ").concat(o);s.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}],totalMemory:i})}):s.worker.postMessage({type:"command",arguments:command.split(" "),totalMemory:i})}),u(a(s),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),u(a(s),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),s.initWebWorker(),s}return e=o,(t=[{key:"initWebWorker",value:function(){var n=this;this.worker=new h(c),this.log;var r=this.worker.onmessage=function(e){var t=e.data;e&&e.type&&("ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),r("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data))}}},{key:"worker",get:function(){return this._worker},set:function(e){this._worker=e}},{key:"inputFile",get:function(){return this._inputFile},set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}}])&&i(e.prototype,t),n&&i(e,n),o}(),L=c,k=_,E={on:function(){},emit:function(){}},t=t||window,E=E=t&&t.Blob?new _:E;e.FFMPEGWebworker=L,e.FFMPEGWebworkerClient=k,e.default=E,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
